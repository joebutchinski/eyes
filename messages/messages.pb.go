// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	ProbeACK
	ProbeResult
	ProbeCommand
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProbeACK_Type int32

const (
	ProbeACK_HELLO  ProbeACK_Type = 0
	ProbeACK_RESULT ProbeACK_Type = 1
)

var ProbeACK_Type_name = map[int32]string{
	0: "HELLO",
	1: "RESULT",
}
var ProbeACK_Type_value = map[string]int32{
	"HELLO":  0,
	"RESULT": 1,
}

func (x ProbeACK_Type) String() string {
	return proto.EnumName(ProbeACK_Type_name, int32(x))
}
func (ProbeACK_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ProbeResult_Type int32

const (
	ProbeResult_NOOP ProbeResult_Type = 0
	ProbeResult_TCP  ProbeResult_Type = 1
	ProbeResult_ICMP ProbeResult_Type = 2
)

var ProbeResult_Type_name = map[int32]string{
	0: "NOOP",
	1: "TCP",
	2: "ICMP",
}
var ProbeResult_Type_value = map[string]int32{
	"NOOP": 0,
	"TCP":  1,
	"ICMP": 2,
}

func (x ProbeResult_Type) String() string {
	return proto.EnumName(ProbeResult_Type_name, int32(x))
}
func (ProbeResult_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ProbeCommand_Type int32

const (
	ProbeCommand_NOOP ProbeCommand_Type = 0
	ProbeCommand_TCP  ProbeCommand_Type = 1
	ProbeCommand_ICMP ProbeCommand_Type = 2
)

var ProbeCommand_Type_name = map[int32]string{
	0: "NOOP",
	1: "TCP",
	2: "ICMP",
}
var ProbeCommand_Type_value = map[string]int32{
	"NOOP": 0,
	"TCP":  1,
	"ICMP": 2,
}

func (x ProbeCommand_Type) String() string {
	return proto.EnumName(ProbeCommand_Type_name, int32(x))
}
func (ProbeCommand_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ProbeACK struct {
	Type      ProbeACK_Type `protobuf:"varint,1,opt,name=type,enum=messages.ProbeACK_Type" json:"type,omitempty"`
	Id        string        `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Ipaddress string        `protobuf:"bytes,3,opt,name=ipaddress" json:"ipaddress,omitempty"`
	Auth      string        `protobuf:"bytes,4,opt,name=auth" json:"auth,omitempty"`
	Label     string        `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	Location  string        `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	Result    *ProbeResult  `protobuf:"bytes,7,opt,name=result" json:"result,omitempty"`
}

func (m *ProbeACK) Reset()                    { *m = ProbeACK{} }
func (m *ProbeACK) String() string            { return proto.CompactTextString(m) }
func (*ProbeACK) ProtoMessage()               {}
func (*ProbeACK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProbeACK) GetType() ProbeACK_Type {
	if m != nil {
		return m.Type
	}
	return ProbeACK_HELLO
}

func (m *ProbeACK) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProbeACK) GetIpaddress() string {
	if m != nil {
		return m.Ipaddress
	}
	return ""
}

func (m *ProbeACK) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *ProbeACK) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ProbeACK) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *ProbeACK) GetResult() *ProbeResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ProbeResult struct {
	Type      ProbeResult_Type `protobuf:"varint,1,opt,name=type,enum=messages.ProbeResult_Type" json:"type,omitempty"`
	CmdId     string           `protobuf:"bytes,2,opt,name=cmdId" json:"cmdId,omitempty"`
	Host      string           `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	ProbeId   string           `protobuf:"bytes,4,opt,name=probeId" json:"probeId,omitempty"`
	Timestamp int64            `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Data      []byte           `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ProbeResult) Reset()                    { *m = ProbeResult{} }
func (m *ProbeResult) String() string            { return proto.CompactTextString(m) }
func (*ProbeResult) ProtoMessage()               {}
func (*ProbeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProbeResult) GetType() ProbeResult_Type {
	if m != nil {
		return m.Type
	}
	return ProbeResult_NOOP
}

func (m *ProbeResult) GetCmdId() string {
	if m != nil {
		return m.CmdId
	}
	return ""
}

func (m *ProbeResult) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ProbeResult) GetProbeId() string {
	if m != nil {
		return m.ProbeId
	}
	return ""
}

func (m *ProbeResult) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProbeResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProbeCommand struct {
	Id         string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Host       string            `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Type       ProbeCommand_Type `protobuf:"varint,3,opt,name=type,enum=messages.ProbeCommand_Type" json:"type,omitempty"`
	Parameters map[string]string `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ProbeCommand) Reset()                    { *m = ProbeCommand{} }
func (m *ProbeCommand) String() string            { return proto.CompactTextString(m) }
func (*ProbeCommand) ProtoMessage()               {}
func (*ProbeCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProbeCommand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProbeCommand) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ProbeCommand) GetType() ProbeCommand_Type {
	if m != nil {
		return m.Type
	}
	return ProbeCommand_NOOP
}

func (m *ProbeCommand) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func init() {
	proto.RegisterType((*ProbeACK)(nil), "messages.ProbeACK")
	proto.RegisterType((*ProbeResult)(nil), "messages.ProbeResult")
	proto.RegisterType((*ProbeCommand)(nil), "messages.ProbeCommand")
	proto.RegisterEnum("messages.ProbeACK_Type", ProbeACK_Type_name, ProbeACK_Type_value)
	proto.RegisterEnum("messages.ProbeResult_Type", ProbeResult_Type_name, ProbeResult_Type_value)
	proto.RegisterEnum("messages.ProbeCommand_Type", ProbeCommand_Type_name, ProbeCommand_Type_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xdf, 0xaa, 0xd3, 0x30,
	0x1c, 0xc7, 0x4f, 0xda, 0xae, 0xeb, 0x7e, 0x3b, 0xcc, 0x12, 0x8e, 0x18, 0xa6, 0x42, 0xa9, 0x20,
	0x05, 0xb1, 0xc2, 0xbc, 0x11, 0xc1, 0x0b, 0x29, 0x13, 0x87, 0xd3, 0x95, 0x38, 0x1f, 0x20, 0x3b,
	0x09, 0x9e, 0x62, 0xbb, 0x96, 0x26, 0x13, 0xfa, 0x14, 0xbe, 0x9e, 0xaf, 0xe2, 0x9d, 0x24, 0x27,
	0xed, 0xa9, 0x43, 0xc1, 0xbb, 0xdf, 0x7f, 0xbe, 0xdf, 0x4f, 0x02, 0x8b, 0x4a, 0x48, 0xc9, 0xbe,
	0x0a, 0x99, 0x36, 0x6d, 0xad, 0x6a, 0x1c, 0xf4, 0x79, 0xfc, 0x0b, 0x41, 0x90, 0xb7, 0xf5, 0x41,
	0xbc, 0xcd, 0x3e, 0xe0, 0x67, 0xe0, 0xa9, 0xae, 0x11, 0x04, 0x45, 0x28, 0x59, 0xac, 0x1e, 0xa4,
	0xc3, 0x56, 0x3f, 0x91, 0xee, 0xbb, 0x46, 0x50, 0x33, 0x84, 0x17, 0xe0, 0x14, 0x9c, 0x38, 0x11,
	0x4a, 0x66, 0xd4, 0x29, 0x38, 0x7e, 0x04, 0xb3, 0xa2, 0x61, 0x9c, 0xb7, 0x42, 0x4a, 0xe2, 0x9a,
	0xf2, 0x5d, 0x01, 0x63, 0xf0, 0xd8, 0x49, 0xdd, 0x10, 0xcf, 0x34, 0x4c, 0x8c, 0xaf, 0x60, 0x52,
	0xb2, 0x83, 0x28, 0xc9, 0xc4, 0x14, 0x6f, 0x13, 0xbc, 0x84, 0xa0, 0xac, 0xaf, 0x99, 0x2a, 0xea,
	0x23, 0xf1, 0x4d, 0x63, 0xc8, 0xf1, 0x73, 0xf0, 0x5b, 0x21, 0x4f, 0xa5, 0x22, 0xd3, 0x08, 0x25,
	0xf3, 0xd5, 0xfd, 0x33, 0x89, 0xd4, 0x34, 0xa9, 0x1d, 0x8a, 0x1f, 0x83, 0xa7, 0x05, 0xe3, 0x19,
	0x4c, 0xde, 0xaf, 0xb7, 0xdb, 0x5d, 0x78, 0x81, 0x01, 0x7c, 0xba, 0xfe, 0xfc, 0x65, 0xbb, 0x0f,
	0x51, 0xfc, 0x13, 0xc1, 0x7c, 0xb4, 0x86, 0xd3, 0x3f, 0xec, 0x2f, 0xff, 0x7a, 0x7b, 0x4c, 0xe0,
	0x0a, 0x26, 0xd7, 0x15, 0xdf, 0xf4, 0x10, 0x6e, 0x13, 0xed, 0xf4, 0xa6, 0x96, 0xca, 0x22, 0x30,
	0x31, 0x26, 0x30, 0x6d, 0xf4, 0x8d, 0x0d, 0xb7, 0x00, 0xfa, 0x54, 0x53, 0x53, 0x45, 0x25, 0xa4,
	0x62, 0x55, 0x63, 0x38, 0xb8, 0xf4, 0xae, 0xa0, 0x6f, 0x71, 0xa6, 0x98, 0xe1, 0x70, 0x49, 0x4d,
	0x1c, 0x3f, 0xb1, 0xa6, 0x02, 0xf0, 0x3e, 0xed, 0x76, 0x79, 0x78, 0x81, 0xa7, 0xe0, 0xee, 0xb3,
	0x3c, 0x44, 0xba, 0xb4, 0xc9, 0x3e, 0xe6, 0xa1, 0x13, 0xff, 0x70, 0xe0, 0xd2, 0xa8, 0xce, 0xea,
	0xaa, 0x62, 0x47, 0x6e, 0x5f, 0x0b, 0x0d, 0xaf, 0xd5, 0xab, 0x74, 0x46, 0x2a, 0x5f, 0x58, 0xff,
	0xae, 0xf1, 0xff, 0xf0, 0xcc, 0xbf, 0xbd, 0x34, 0x06, 0xf0, 0x0e, 0xa0, 0x61, 0x2d, 0xab, 0x84,
	0x12, 0xad, 0x24, 0x5e, 0xe4, 0x26, 0xf3, 0xd5, 0xd3, 0x7f, 0xac, 0xe5, 0xc3, 0xe0, 0xfa, 0xa8,
	0xda, 0x8e, 0x8e, 0x36, 0x97, 0x6f, 0xe0, 0xde, 0x59, 0x1b, 0x87, 0xe0, 0x7e, 0x13, 0x9d, 0x15,
	0xac, 0x43, 0x4d, 0xfb, 0x3b, 0x2b, 0x4f, 0xa2, 0xa7, 0x6d, 0x92, 0xd7, 0xce, 0x2b, 0xf4, 0x5f,
	0x44, 0x0e, 0xbe, 0xf9, 0xf9, 0x2f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xec, 0x0d, 0x65,
	0x0b, 0x03, 0x00, 0x00,
}
